{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM1rq3OTrjf8gGwOzorfmfw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rohitrai1310/python3/blob/master/fraction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "fNLWrS1Djgg_"
      },
      "outputs": [],
      "source": [
        "class FractionClass():\n",
        "  # parameterized constructor \n",
        "  def __init__(self , num , den):\n",
        "    self.num = num\n",
        "    self.den = den\n",
        "\n",
        "# these 3 lines are wrong \n",
        "#    create_fraction()\n",
        "#  def create_fraction(self):\n",
        "#    print(\" this is fraction :\", self.num/self.den )\n",
        "   \n",
        "  \"\"\" we will use magic method __str__  , so whenever \n",
        "  object of class FractionClass will initialise , it will \n",
        "  look for str magic method and print what is in return \n",
        "\n",
        "\n",
        "  \"\"\"\n",
        "  def __str__(self):\n",
        "    return (\"{}/{}\".format(self.num , self.den ))\n",
        "\n",
        "  \n",
        "  def add_fraction(self , other):\n",
        "    self.num = self.num*other.den + other.num*self.den\n",
        "\n",
        "    self.den = self.den *other.den\n",
        "    \n",
        "    print(\"{}/{}\".format( self.num , self.den))\n",
        "\n",
        " \n",
        "  def __add__(self , other):\n",
        "    self.num = self.num*other.den + other.num*self.den\n",
        "\n",
        "    self.den = self.den *other.den\n",
        "    \n",
        "    return(\"{}/{}\".format( self.num , self.den))\n",
        "    \n",
        "  \n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "f1 = FractionClass( 2,3)\n",
        "print(f1)\n",
        "\n",
        "f2 = FractionClass( 4, 5)\n",
        "\n",
        "print(f2)\n",
        "\n",
        "print(f1 + f2)\n",
        "\n",
        "print(f1)\n",
        "print(f2)\n",
        "\n",
        "\n",
        "f3 = FractionClass.add_fraction(f1,f2)\n",
        "\n",
        "print (f3)\n",
        "\n",
        "print(f1 + f2) "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xK1Mi82dndoF",
        "outputId": "2b1070fc-6b45-4bd5-a61c-400f3bee9db3"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2/3\n",
            "4/5\n",
            "22/15\n",
            "22/15\n",
            "4/5\n",
            "170/75\n",
            "None\n",
            "1150/375\n"
          ]
        }
      ]
    }
  ]
}